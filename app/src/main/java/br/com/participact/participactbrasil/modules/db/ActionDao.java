package br.com.participact.participactbrasil.modules.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTION".
*/
public class ActionDao extends AbstractDao<Action, Long> {

    public static final String TABLENAME = "ACTION";

    /**
     * Properties of entity Action.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Minimum = new Property(2, Integer.class, "minimum", false, "MINIMUM");
        public final static Property InputType = new Property(3, Integer.class, "inputType", false, "INPUT_TYPE");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property SensorDuration = new Property(6, Long.class, "sensorDuration", false, "SENSOR_DURATION");
        public final static Property ActionDescription = new Property(7, String.class, "actionDescription", false, "ACTION_DESCRIPTION");
        public final static Property CampaignId = new Property(8, Long.class, "campaignId", false, "CAMPAIGN_ID");
        public final static Property SensorWeekSun = new Property(9, Boolean.class, "sensorWeekSun", false, "SENSOR_WEEK_SUN");
        public final static Property SensorWeekMon = new Property(10, Boolean.class, "sensorWeekMon", false, "SENSOR_WEEK_MON");
        public final static Property SensorWeekTue = new Property(11, Boolean.class, "sensorWeekTue", false, "SENSOR_WEEK_TUE");
        public final static Property SensorWeekWed = new Property(12, Boolean.class, "sensorWeekWed", false, "SENSOR_WEEK_WED");
        public final static Property SensorWeekThu = new Property(13, Boolean.class, "sensorWeekThu", false, "SENSOR_WEEK_THU");
        public final static Property SensorWeekFri = new Property(14, Boolean.class, "sensorWeekFri", false, "SENSOR_WEEK_FRI");
        public final static Property SensorWeekSat = new Property(15, Boolean.class, "sensorWeekSat", false, "SENSOR_WEEK_SAT");
        public final static Property Repeat = new Property(16, Boolean.class, "repeat", false, "REPEAT");
    }

    private DaoSession daoSession;

    private Query<Action> campaign_ActionsQuery;

    public ActionDao(DaoConfig config) {
        super(config);
    }
    
    public ActionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"MINIMUM\" INTEGER," + // 2: minimum
                "\"INPUT_TYPE\" INTEGER," + // 3: inputType
                "\"TYPE\" TEXT," + // 4: type
                "\"TITLE\" TEXT," + // 5: title
                "\"SENSOR_DURATION\" INTEGER," + // 6: sensorDuration
                "\"ACTION_DESCRIPTION\" TEXT," + // 7: actionDescription
                "\"CAMPAIGN_ID\" INTEGER," + // 8: campaignId
                "\"SENSOR_WEEK_SUN\" INTEGER," + // 9: sensorWeekSun
                "\"SENSOR_WEEK_MON\" INTEGER," + // 10: sensorWeekMon
                "\"SENSOR_WEEK_TUE\" INTEGER," + // 11: sensorWeekTue
                "\"SENSOR_WEEK_WED\" INTEGER," + // 12: sensorWeekWed
                "\"SENSOR_WEEK_THU\" INTEGER," + // 13: sensorWeekThu
                "\"SENSOR_WEEK_FRI\" INTEGER," + // 14: sensorWeekFri
                "\"SENSOR_WEEK_SAT\" INTEGER," + // 15: sensorWeekSat
                "\"REPEAT\" INTEGER);"); // 16: repeat
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Action entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer minimum = entity.getMinimum();
        if (minimum != null) {
            stmt.bindLong(3, minimum);
        }
 
        Integer inputType = entity.getInputType();
        if (inputType != null) {
            stmt.bindLong(4, inputType);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        Long sensorDuration = entity.getSensorDuration();
        if (sensorDuration != null) {
            stmt.bindLong(7, sensorDuration);
        }
 
        String actionDescription = entity.getActionDescription();
        if (actionDescription != null) {
            stmt.bindString(8, actionDescription);
        }
 
        Long campaignId = entity.getCampaignId();
        if (campaignId != null) {
            stmt.bindLong(9, campaignId);
        }
 
        Boolean sensorWeekSun = entity.getSensorWeekSun();
        if (sensorWeekSun != null) {
            stmt.bindLong(10, sensorWeekSun ? 1L: 0L);
        }
 
        Boolean sensorWeekMon = entity.getSensorWeekMon();
        if (sensorWeekMon != null) {
            stmt.bindLong(11, sensorWeekMon ? 1L: 0L);
        }
 
        Boolean sensorWeekTue = entity.getSensorWeekTue();
        if (sensorWeekTue != null) {
            stmt.bindLong(12, sensorWeekTue ? 1L: 0L);
        }
 
        Boolean sensorWeekWed = entity.getSensorWeekWed();
        if (sensorWeekWed != null) {
            stmt.bindLong(13, sensorWeekWed ? 1L: 0L);
        }
 
        Boolean sensorWeekThu = entity.getSensorWeekThu();
        if (sensorWeekThu != null) {
            stmt.bindLong(14, sensorWeekThu ? 1L: 0L);
        }
 
        Boolean sensorWeekFri = entity.getSensorWeekFri();
        if (sensorWeekFri != null) {
            stmt.bindLong(15, sensorWeekFri ? 1L: 0L);
        }
 
        Boolean sensorWeekSat = entity.getSensorWeekSat();
        if (sensorWeekSat != null) {
            stmt.bindLong(16, sensorWeekSat ? 1L: 0L);
        }
 
        Boolean repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindLong(17, repeat ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Action entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer minimum = entity.getMinimum();
        if (minimum != null) {
            stmt.bindLong(3, minimum);
        }
 
        Integer inputType = entity.getInputType();
        if (inputType != null) {
            stmt.bindLong(4, inputType);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        Long sensorDuration = entity.getSensorDuration();
        if (sensorDuration != null) {
            stmt.bindLong(7, sensorDuration);
        }
 
        String actionDescription = entity.getActionDescription();
        if (actionDescription != null) {
            stmt.bindString(8, actionDescription);
        }
 
        Long campaignId = entity.getCampaignId();
        if (campaignId != null) {
            stmt.bindLong(9, campaignId);
        }
 
        Boolean sensorWeekSun = entity.getSensorWeekSun();
        if (sensorWeekSun != null) {
            stmt.bindLong(10, sensorWeekSun ? 1L: 0L);
        }
 
        Boolean sensorWeekMon = entity.getSensorWeekMon();
        if (sensorWeekMon != null) {
            stmt.bindLong(11, sensorWeekMon ? 1L: 0L);
        }
 
        Boolean sensorWeekTue = entity.getSensorWeekTue();
        if (sensorWeekTue != null) {
            stmt.bindLong(12, sensorWeekTue ? 1L: 0L);
        }
 
        Boolean sensorWeekWed = entity.getSensorWeekWed();
        if (sensorWeekWed != null) {
            stmt.bindLong(13, sensorWeekWed ? 1L: 0L);
        }
 
        Boolean sensorWeekThu = entity.getSensorWeekThu();
        if (sensorWeekThu != null) {
            stmt.bindLong(14, sensorWeekThu ? 1L: 0L);
        }
 
        Boolean sensorWeekFri = entity.getSensorWeekFri();
        if (sensorWeekFri != null) {
            stmt.bindLong(15, sensorWeekFri ? 1L: 0L);
        }
 
        Boolean sensorWeekSat = entity.getSensorWeekSat();
        if (sensorWeekSat != null) {
            stmt.bindLong(16, sensorWeekSat ? 1L: 0L);
        }
 
        Boolean repeat = entity.getRepeat();
        if (repeat != null) {
            stmt.bindLong(17, repeat ? 1L: 0L);
        }
    }

    @Override
    protected final void attachEntity(Action entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Action readEntity(Cursor cursor, int offset) {
        Action entity = new Action( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // minimum
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // inputType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // sensorDuration
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // actionDescription
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // campaignId
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // sensorWeekSun
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // sensorWeekMon
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // sensorWeekTue
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // sensorWeekWed
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // sensorWeekThu
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // sensorWeekFri
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // sensorWeekSat
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0 // repeat
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Action entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMinimum(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setInputType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSensorDuration(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setActionDescription(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCampaignId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setSensorWeekSun(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setSensorWeekMon(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setSensorWeekTue(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setSensorWeekWed(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setSensorWeekThu(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setSensorWeekFri(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setSensorWeekSat(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setRepeat(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Action entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Action entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Action entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "actions" to-many relationship of Campaign. */
    public List<Action> _queryCampaign_Actions(Long campaignId) {
        synchronized (this) {
            if (campaign_ActionsQuery == null) {
                QueryBuilder<Action> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CampaignId.eq(null));
                campaign_ActionsQuery = queryBuilder.build();
            }
        }
        Query<Action> query = campaign_ActionsQuery.forCurrentThread();
        query.setParameter(0, campaignId);
        return query.list();
    }

}
