package br.com.participact.participactbrasil.modules.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAMPAIGN".
*/
public class CampaignDao extends AbstractDao<Campaign, Long> {

    public static final String TABLENAME = "CAMPAIGN";

    /**
     * Properties of entity Campaign.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Text = new Property(2, String.class, "text", false, "TEXT");
        public final static Property StartDateString = new Property(3, String.class, "startDateString", false, "START_DATE_STRING");
        public final static Property DeadlineDateString = new Property(4, String.class, "deadlineDateString", false, "DEADLINE_DATE_STRING");
        public final static Property Duration = new Property(5, Long.class, "duration", false, "DURATION");
        public final static Property SensingDuration = new Property(6, Long.class, "sensingDuration", false, "SENSING_DURATION");
        public final static Property Refusable = new Property(7, Boolean.class, "refusable", false, "REFUSABLE");
        public final static Property NotificationArea = new Property(8, String.class, "notificationArea", false, "NOTIFICATION_AREA");
        public final static Property ActivationArea = new Property(9, String.class, "activationArea", false, "ACTIVATION_AREA");
        public final static Property Agreement = new Property(10, String.class, "agreement", false, "AGREEMENT");
        public final static Property SensingWeekSun = new Property(11, Boolean.class, "sensingWeekSun", false, "SENSING_WEEK_SUN");
        public final static Property SensingWeekMon = new Property(12, Boolean.class, "sensingWeekMon", false, "SENSING_WEEK_MON");
        public final static Property SensingWeekTue = new Property(13, Boolean.class, "sensingWeekTue", false, "SENSING_WEEK_TUE");
        public final static Property SensingWeekWed = new Property(14, Boolean.class, "sensingWeekWed", false, "SENSING_WEEK_WED");
        public final static Property SensingWeekThu = new Property(15, Boolean.class, "sensingWeekThu", false, "SENSING_WEEK_THU");
        public final static Property SensingWeekFri = new Property(16, Boolean.class, "sensingWeekFri", false, "SENSING_WEEK_FRI");
        public final static Property SensingWeekSat = new Property(17, Boolean.class, "sensingWeekSat", false, "SENSING_WEEK_SAT");
        public final static Property CardOpen = new Property(18, Boolean.class, "cardOpen", false, "CARD_OPEN");
        public final static Property RawState = new Property(19, String.class, "rawState", false, "RAW_STATE");
        public final static Property CardColor = new Property(20, String.class, "cardColor", false, "CARD_COLOR");
        public final static Property CardIconUrl = new Property(21, String.class, "cardIconUrl", false, "CARD_ICON_URL");
        public final static Property AgreementAccepted = new Property(22, Boolean.class, "agreementAccepted", false, "AGREEMENT_ACCEPTED");
        public final static Property Archived = new Property(23, Boolean.class, "archived", false, "ARCHIVED");
        public final static Property ArchivedCount = new Property(24, Integer.class, "archivedCount", false, "ARCHIVED_COUNT");
    }

    private DaoSession daoSession;


    public CampaignDao(DaoConfig config) {
        super(config);
    }
    
    public CampaignDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAMPAIGN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TEXT\" TEXT," + // 2: text
                "\"START_DATE_STRING\" TEXT," + // 3: startDateString
                "\"DEADLINE_DATE_STRING\" TEXT," + // 4: deadlineDateString
                "\"DURATION\" INTEGER," + // 5: duration
                "\"SENSING_DURATION\" INTEGER," + // 6: sensingDuration
                "\"REFUSABLE\" INTEGER," + // 7: refusable
                "\"NOTIFICATION_AREA\" TEXT," + // 8: notificationArea
                "\"ACTIVATION_AREA\" TEXT," + // 9: activationArea
                "\"AGREEMENT\" TEXT," + // 10: agreement
                "\"SENSING_WEEK_SUN\" INTEGER," + // 11: sensingWeekSun
                "\"SENSING_WEEK_MON\" INTEGER," + // 12: sensingWeekMon
                "\"SENSING_WEEK_TUE\" INTEGER," + // 13: sensingWeekTue
                "\"SENSING_WEEK_WED\" INTEGER," + // 14: sensingWeekWed
                "\"SENSING_WEEK_THU\" INTEGER," + // 15: sensingWeekThu
                "\"SENSING_WEEK_FRI\" INTEGER," + // 16: sensingWeekFri
                "\"SENSING_WEEK_SAT\" INTEGER," + // 17: sensingWeekSat
                "\"CARD_OPEN\" INTEGER," + // 18: cardOpen
                "\"RAW_STATE\" TEXT," + // 19: rawState
                "\"CARD_COLOR\" TEXT," + // 20: cardColor
                "\"CARD_ICON_URL\" TEXT," + // 21: cardIconUrl
                "\"AGREEMENT_ACCEPTED\" INTEGER," + // 22: agreementAccepted
                "\"ARCHIVED\" INTEGER," + // 23: archived
                "\"ARCHIVED_COUNT\" INTEGER);"); // 24: archivedCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAMPAIGN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Campaign entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        String startDateString = entity.getStartDateString();
        if (startDateString != null) {
            stmt.bindString(4, startDateString);
        }
 
        String deadlineDateString = entity.getDeadlineDateString();
        if (deadlineDateString != null) {
            stmt.bindString(5, deadlineDateString);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(6, duration);
        }
 
        Long sensingDuration = entity.getSensingDuration();
        if (sensingDuration != null) {
            stmt.bindLong(7, sensingDuration);
        }
 
        Boolean refusable = entity.getRefusable();
        if (refusable != null) {
            stmt.bindLong(8, refusable ? 1L: 0L);
        }
 
        String notificationArea = entity.getNotificationArea();
        if (notificationArea != null) {
            stmt.bindString(9, notificationArea);
        }
 
        String activationArea = entity.getActivationArea();
        if (activationArea != null) {
            stmt.bindString(10, activationArea);
        }
 
        String agreement = entity.getAgreement();
        if (agreement != null) {
            stmt.bindString(11, agreement);
        }
 
        Boolean sensingWeekSun = entity.getSensingWeekSun();
        if (sensingWeekSun != null) {
            stmt.bindLong(12, sensingWeekSun ? 1L: 0L);
        }
 
        Boolean sensingWeekMon = entity.getSensingWeekMon();
        if (sensingWeekMon != null) {
            stmt.bindLong(13, sensingWeekMon ? 1L: 0L);
        }
 
        Boolean sensingWeekTue = entity.getSensingWeekTue();
        if (sensingWeekTue != null) {
            stmt.bindLong(14, sensingWeekTue ? 1L: 0L);
        }
 
        Boolean sensingWeekWed = entity.getSensingWeekWed();
        if (sensingWeekWed != null) {
            stmt.bindLong(15, sensingWeekWed ? 1L: 0L);
        }
 
        Boolean sensingWeekThu = entity.getSensingWeekThu();
        if (sensingWeekThu != null) {
            stmt.bindLong(16, sensingWeekThu ? 1L: 0L);
        }
 
        Boolean sensingWeekFri = entity.getSensingWeekFri();
        if (sensingWeekFri != null) {
            stmt.bindLong(17, sensingWeekFri ? 1L: 0L);
        }
 
        Boolean sensingWeekSat = entity.getSensingWeekSat();
        if (sensingWeekSat != null) {
            stmt.bindLong(18, sensingWeekSat ? 1L: 0L);
        }
 
        Boolean cardOpen = entity.getCardOpen();
        if (cardOpen != null) {
            stmt.bindLong(19, cardOpen ? 1L: 0L);
        }
 
        String rawState = entity.getRawState();
        if (rawState != null) {
            stmt.bindString(20, rawState);
        }
 
        String cardColor = entity.getCardColor();
        if (cardColor != null) {
            stmt.bindString(21, cardColor);
        }
 
        String cardIconUrl = entity.getCardIconUrl();
        if (cardIconUrl != null) {
            stmt.bindString(22, cardIconUrl);
        }
 
        Boolean agreementAccepted = entity.getAgreementAccepted();
        if (agreementAccepted != null) {
            stmt.bindLong(23, agreementAccepted ? 1L: 0L);
        }
 
        Boolean archived = entity.getArchived();
        if (archived != null) {
            stmt.bindLong(24, archived ? 1L: 0L);
        }
 
        Integer archivedCount = entity.getArchivedCount();
        if (archivedCount != null) {
            stmt.bindLong(25, archivedCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Campaign entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        String startDateString = entity.getStartDateString();
        if (startDateString != null) {
            stmt.bindString(4, startDateString);
        }
 
        String deadlineDateString = entity.getDeadlineDateString();
        if (deadlineDateString != null) {
            stmt.bindString(5, deadlineDateString);
        }
 
        Long duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(6, duration);
        }
 
        Long sensingDuration = entity.getSensingDuration();
        if (sensingDuration != null) {
            stmt.bindLong(7, sensingDuration);
        }
 
        Boolean refusable = entity.getRefusable();
        if (refusable != null) {
            stmt.bindLong(8, refusable ? 1L: 0L);
        }
 
        String notificationArea = entity.getNotificationArea();
        if (notificationArea != null) {
            stmt.bindString(9, notificationArea);
        }
 
        String activationArea = entity.getActivationArea();
        if (activationArea != null) {
            stmt.bindString(10, activationArea);
        }
 
        String agreement = entity.getAgreement();
        if (agreement != null) {
            stmt.bindString(11, agreement);
        }
 
        Boolean sensingWeekSun = entity.getSensingWeekSun();
        if (sensingWeekSun != null) {
            stmt.bindLong(12, sensingWeekSun ? 1L: 0L);
        }
 
        Boolean sensingWeekMon = entity.getSensingWeekMon();
        if (sensingWeekMon != null) {
            stmt.bindLong(13, sensingWeekMon ? 1L: 0L);
        }
 
        Boolean sensingWeekTue = entity.getSensingWeekTue();
        if (sensingWeekTue != null) {
            stmt.bindLong(14, sensingWeekTue ? 1L: 0L);
        }
 
        Boolean sensingWeekWed = entity.getSensingWeekWed();
        if (sensingWeekWed != null) {
            stmt.bindLong(15, sensingWeekWed ? 1L: 0L);
        }
 
        Boolean sensingWeekThu = entity.getSensingWeekThu();
        if (sensingWeekThu != null) {
            stmt.bindLong(16, sensingWeekThu ? 1L: 0L);
        }
 
        Boolean sensingWeekFri = entity.getSensingWeekFri();
        if (sensingWeekFri != null) {
            stmt.bindLong(17, sensingWeekFri ? 1L: 0L);
        }
 
        Boolean sensingWeekSat = entity.getSensingWeekSat();
        if (sensingWeekSat != null) {
            stmt.bindLong(18, sensingWeekSat ? 1L: 0L);
        }
 
        Boolean cardOpen = entity.getCardOpen();
        if (cardOpen != null) {
            stmt.bindLong(19, cardOpen ? 1L: 0L);
        }
 
        String rawState = entity.getRawState();
        if (rawState != null) {
            stmt.bindString(20, rawState);
        }
 
        String cardColor = entity.getCardColor();
        if (cardColor != null) {
            stmt.bindString(21, cardColor);
        }
 
        String cardIconUrl = entity.getCardIconUrl();
        if (cardIconUrl != null) {
            stmt.bindString(22, cardIconUrl);
        }
 
        Boolean agreementAccepted = entity.getAgreementAccepted();
        if (agreementAccepted != null) {
            stmt.bindLong(23, agreementAccepted ? 1L: 0L);
        }
 
        Boolean archived = entity.getArchived();
        if (archived != null) {
            stmt.bindLong(24, archived ? 1L: 0L);
        }
 
        Integer archivedCount = entity.getArchivedCount();
        if (archivedCount != null) {
            stmt.bindLong(25, archivedCount);
        }
    }

    @Override
    protected final void attachEntity(Campaign entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Campaign readEntity(Cursor cursor, int offset) {
        Campaign entity = new Campaign( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // startDateString
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deadlineDateString
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // duration
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // sensingDuration
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // refusable
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // notificationArea
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // activationArea
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // agreement
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // sensingWeekSun
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // sensingWeekMon
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // sensingWeekTue
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // sensingWeekWed
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // sensingWeekThu
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // sensingWeekFri
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // sensingWeekSat
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // cardOpen
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // rawState
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // cardColor
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // cardIconUrl
            cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0, // agreementAccepted
            cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0, // archived
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24) // archivedCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Campaign entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartDateString(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeadlineDateString(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDuration(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSensingDuration(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setRefusable(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setNotificationArea(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setActivationArea(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAgreement(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSensingWeekSun(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setSensingWeekMon(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setSensingWeekTue(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setSensingWeekWed(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setSensingWeekThu(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setSensingWeekFri(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setSensingWeekSat(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setCardOpen(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setRawState(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCardColor(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCardIconUrl(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAgreementAccepted(cursor.isNull(offset + 22) ? null : cursor.getShort(offset + 22) != 0);
        entity.setArchived(cursor.isNull(offset + 23) ? null : cursor.getShort(offset + 23) != 0);
        entity.setArchivedCount(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Campaign entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Campaign entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Campaign entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
