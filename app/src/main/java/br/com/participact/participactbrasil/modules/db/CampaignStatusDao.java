package br.com.participact.participactbrasil.modules.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAMPAIGN_STATUS".
*/
public class CampaignStatusDao extends AbstractDao<CampaignStatus, Long> {

    public static final String TABLENAME = "CAMPAIGN_STATUS";

    /**
     * Properties of entity CampaignStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CampaignId = new Property(0, Long.class, "campaignId", true, "CAMPAIGN_ID");
        public final static Property Ended = new Property(1, Boolean.class, "ended", false, "ENDED");
        public final static Property Completed = new Property(2, Boolean.class, "completed", false, "COMPLETED");
        public final static Property CampaignProgress = new Property(3, Integer.class, "campaignProgress", false, "CAMPAIGN_PROGRESS");
        public final static Property CampaignDateProgress = new Property(4, Integer.class, "campaignDateProgress", false, "CAMPAIGN_DATE_PROGRESS");
    }


    public CampaignStatusDao(DaoConfig config) {
        super(config);
    }
    
    public CampaignStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAMPAIGN_STATUS\" (" + //
                "\"CAMPAIGN_ID\" INTEGER PRIMARY KEY ," + // 0: campaignId
                "\"ENDED\" INTEGER," + // 1: ended
                "\"COMPLETED\" INTEGER," + // 2: completed
                "\"CAMPAIGN_PROGRESS\" INTEGER," + // 3: campaignProgress
                "\"CAMPAIGN_DATE_PROGRESS\" INTEGER);"); // 4: campaignDateProgress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAMPAIGN_STATUS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CampaignStatus entity) {
        stmt.clearBindings();
 
        Long campaignId = entity.getCampaignId();
        if (campaignId != null) {
            stmt.bindLong(1, campaignId);
        }
 
        Boolean ended = entity.getEnded();
        if (ended != null) {
            stmt.bindLong(2, ended ? 1L: 0L);
        }
 
        Boolean completed = entity.getCompleted();
        if (completed != null) {
            stmt.bindLong(3, completed ? 1L: 0L);
        }
 
        Integer campaignProgress = entity.getCampaignProgress();
        if (campaignProgress != null) {
            stmt.bindLong(4, campaignProgress);
        }
 
        Integer campaignDateProgress = entity.getCampaignDateProgress();
        if (campaignDateProgress != null) {
            stmt.bindLong(5, campaignDateProgress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CampaignStatus entity) {
        stmt.clearBindings();
 
        Long campaignId = entity.getCampaignId();
        if (campaignId != null) {
            stmt.bindLong(1, campaignId);
        }
 
        Boolean ended = entity.getEnded();
        if (ended != null) {
            stmt.bindLong(2, ended ? 1L: 0L);
        }
 
        Boolean completed = entity.getCompleted();
        if (completed != null) {
            stmt.bindLong(3, completed ? 1L: 0L);
        }
 
        Integer campaignProgress = entity.getCampaignProgress();
        if (campaignProgress != null) {
            stmt.bindLong(4, campaignProgress);
        }
 
        Integer campaignDateProgress = entity.getCampaignDateProgress();
        if (campaignDateProgress != null) {
            stmt.bindLong(5, campaignDateProgress);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CampaignStatus readEntity(Cursor cursor, int offset) {
        CampaignStatus entity = new CampaignStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // campaignId
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // ended
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // completed
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // campaignProgress
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // campaignDateProgress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CampaignStatus entity, int offset) {
        entity.setCampaignId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEnded(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setCompleted(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setCampaignProgress(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCampaignDateProgress(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CampaignStatus entity, long rowId) {
        entity.setCampaignId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CampaignStatus entity) {
        if(entity != null) {
            return entity.getCampaignId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CampaignStatus entity) {
        return entity.getCampaignId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
