package br.com.participact.participactbrasil.modules.db;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import br.com.participact.participactbrasil.modules.db.UPFileDB;
import br.com.participact.participactbrasil.modules.db.Campaign;
import br.com.participact.participactbrasil.modules.db.CampaignStatus;
import br.com.participact.participactbrasil.modules.db.Action;
import br.com.participact.participactbrasil.modules.db.Question;
import br.com.participact.participactbrasil.modules.db.QuestionOption;
import br.com.participact.participactbrasil.modules.db.QuestionAnswer;
import br.com.participact.participactbrasil.modules.db.Sensor;
import br.com.participact.participactbrasil.modules.db.UPSensor;
import br.com.participact.participactbrasil.modules.db.Photo;
import br.com.participact.participactbrasil.modules.db.Log;
import br.com.participact.participactbrasil.modules.db.PANotification;
import br.com.participact.participactbrasil.modules.db.AbuseType;
import br.com.participact.participactbrasil.modules.db.PendingRequest;

import br.com.participact.participactbrasil.modules.db.UPFileDBDao;
import br.com.participact.participactbrasil.modules.db.CampaignDao;
import br.com.participact.participactbrasil.modules.db.CampaignStatusDao;
import br.com.participact.participactbrasil.modules.db.ActionDao;
import br.com.participact.participactbrasil.modules.db.QuestionDao;
import br.com.participact.participactbrasil.modules.db.QuestionOptionDao;
import br.com.participact.participactbrasil.modules.db.QuestionAnswerDao;
import br.com.participact.participactbrasil.modules.db.SensorDao;
import br.com.participact.participactbrasil.modules.db.UPSensorDao;
import br.com.participact.participactbrasil.modules.db.PhotoDao;
import br.com.participact.participactbrasil.modules.db.LogDao;
import br.com.participact.participactbrasil.modules.db.PANotificationDao;
import br.com.participact.participactbrasil.modules.db.AbuseTypeDao;
import br.com.participact.participactbrasil.modules.db.PendingRequestDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig uPFileDBDaoConfig;
    private final DaoConfig campaignDaoConfig;
    private final DaoConfig campaignStatusDaoConfig;
    private final DaoConfig actionDaoConfig;
    private final DaoConfig questionDaoConfig;
    private final DaoConfig questionOptionDaoConfig;
    private final DaoConfig questionAnswerDaoConfig;
    private final DaoConfig sensorDaoConfig;
    private final DaoConfig uPSensorDaoConfig;
    private final DaoConfig photoDaoConfig;
    private final DaoConfig logDaoConfig;
    private final DaoConfig pANotificationDaoConfig;
    private final DaoConfig abuseTypeDaoConfig;
    private final DaoConfig pendingRequestDaoConfig;

    private final UPFileDBDao uPFileDBDao;
    private final CampaignDao campaignDao;
    private final CampaignStatusDao campaignStatusDao;
    private final ActionDao actionDao;
    private final QuestionDao questionDao;
    private final QuestionOptionDao questionOptionDao;
    private final QuestionAnswerDao questionAnswerDao;
    private final SensorDao sensorDao;
    private final UPSensorDao uPSensorDao;
    private final PhotoDao photoDao;
    private final LogDao logDao;
    private final PANotificationDao pANotificationDao;
    private final AbuseTypeDao abuseTypeDao;
    private final PendingRequestDao pendingRequestDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        uPFileDBDaoConfig = daoConfigMap.get(UPFileDBDao.class).clone();
        uPFileDBDaoConfig.initIdentityScope(type);

        campaignDaoConfig = daoConfigMap.get(CampaignDao.class).clone();
        campaignDaoConfig.initIdentityScope(type);

        campaignStatusDaoConfig = daoConfigMap.get(CampaignStatusDao.class).clone();
        campaignStatusDaoConfig.initIdentityScope(type);

        actionDaoConfig = daoConfigMap.get(ActionDao.class).clone();
        actionDaoConfig.initIdentityScope(type);

        questionDaoConfig = daoConfigMap.get(QuestionDao.class).clone();
        questionDaoConfig.initIdentityScope(type);

        questionOptionDaoConfig = daoConfigMap.get(QuestionOptionDao.class).clone();
        questionOptionDaoConfig.initIdentityScope(type);

        questionAnswerDaoConfig = daoConfigMap.get(QuestionAnswerDao.class).clone();
        questionAnswerDaoConfig.initIdentityScope(type);

        sensorDaoConfig = daoConfigMap.get(SensorDao.class).clone();
        sensorDaoConfig.initIdentityScope(type);

        uPSensorDaoConfig = daoConfigMap.get(UPSensorDao.class).clone();
        uPSensorDaoConfig.initIdentityScope(type);

        photoDaoConfig = daoConfigMap.get(PhotoDao.class).clone();
        photoDaoConfig.initIdentityScope(type);

        logDaoConfig = daoConfigMap.get(LogDao.class).clone();
        logDaoConfig.initIdentityScope(type);

        pANotificationDaoConfig = daoConfigMap.get(PANotificationDao.class).clone();
        pANotificationDaoConfig.initIdentityScope(type);

        abuseTypeDaoConfig = daoConfigMap.get(AbuseTypeDao.class).clone();
        abuseTypeDaoConfig.initIdentityScope(type);

        pendingRequestDaoConfig = daoConfigMap.get(PendingRequestDao.class).clone();
        pendingRequestDaoConfig.initIdentityScope(type);

        uPFileDBDao = new UPFileDBDao(uPFileDBDaoConfig, this);
        campaignDao = new CampaignDao(campaignDaoConfig, this);
        campaignStatusDao = new CampaignStatusDao(campaignStatusDaoConfig, this);
        actionDao = new ActionDao(actionDaoConfig, this);
        questionDao = new QuestionDao(questionDaoConfig, this);
        questionOptionDao = new QuestionOptionDao(questionOptionDaoConfig, this);
        questionAnswerDao = new QuestionAnswerDao(questionAnswerDaoConfig, this);
        sensorDao = new SensorDao(sensorDaoConfig, this);
        uPSensorDao = new UPSensorDao(uPSensorDaoConfig, this);
        photoDao = new PhotoDao(photoDaoConfig, this);
        logDao = new LogDao(logDaoConfig, this);
        pANotificationDao = new PANotificationDao(pANotificationDaoConfig, this);
        abuseTypeDao = new AbuseTypeDao(abuseTypeDaoConfig, this);
        pendingRequestDao = new PendingRequestDao(pendingRequestDaoConfig, this);

        registerDao(UPFileDB.class, uPFileDBDao);
        registerDao(Campaign.class, campaignDao);
        registerDao(CampaignStatus.class, campaignStatusDao);
        registerDao(Action.class, actionDao);
        registerDao(Question.class, questionDao);
        registerDao(QuestionOption.class, questionOptionDao);
        registerDao(QuestionAnswer.class, questionAnswerDao);
        registerDao(Sensor.class, sensorDao);
        registerDao(UPSensor.class, uPSensorDao);
        registerDao(Photo.class, photoDao);
        registerDao(Log.class, logDao);
        registerDao(PANotification.class, pANotificationDao);
        registerDao(AbuseType.class, abuseTypeDao);
        registerDao(PendingRequest.class, pendingRequestDao);
    }
    
    public void clear() {
        uPFileDBDaoConfig.clearIdentityScope();
        campaignDaoConfig.clearIdentityScope();
        campaignStatusDaoConfig.clearIdentityScope();
        actionDaoConfig.clearIdentityScope();
        questionDaoConfig.clearIdentityScope();
        questionOptionDaoConfig.clearIdentityScope();
        questionAnswerDaoConfig.clearIdentityScope();
        sensorDaoConfig.clearIdentityScope();
        uPSensorDaoConfig.clearIdentityScope();
        photoDaoConfig.clearIdentityScope();
        logDaoConfig.clearIdentityScope();
        pANotificationDaoConfig.clearIdentityScope();
        abuseTypeDaoConfig.clearIdentityScope();
        pendingRequestDaoConfig.clearIdentityScope();
    }

    public UPFileDBDao getUPFileDBDao() {
        return uPFileDBDao;
    }

    public CampaignDao getCampaignDao() {
        return campaignDao;
    }

    public CampaignStatusDao getCampaignStatusDao() {
        return campaignStatusDao;
    }

    public ActionDao getActionDao() {
        return actionDao;
    }

    public QuestionDao getQuestionDao() {
        return questionDao;
    }

    public QuestionOptionDao getQuestionOptionDao() {
        return questionOptionDao;
    }

    public QuestionAnswerDao getQuestionAnswerDao() {
        return questionAnswerDao;
    }

    public SensorDao getSensorDao() {
        return sensorDao;
    }

    public UPSensorDao getUPSensorDao() {
        return uPSensorDao;
    }

    public PhotoDao getPhotoDao() {
        return photoDao;
    }

    public LogDao getLogDao() {
        return logDao;
    }

    public PANotificationDao getPANotificationDao() {
        return pANotificationDao;
    }

    public AbuseTypeDao getAbuseTypeDao() {
        return abuseTypeDao;
    }

    public PendingRequestDao getPendingRequestDao() {
        return pendingRequestDao;
    }

}
