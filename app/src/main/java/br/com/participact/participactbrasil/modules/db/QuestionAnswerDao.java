package br.com.participact.participactbrasil.modules.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION_ANSWER".
*/
public class QuestionAnswerDao extends AbstractDao<QuestionAnswer, Long> {

    public static final String TABLENAME = "QUESTION_ANSWER";

    /**
     * Properties of entity QuestionAnswer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Answer = new Property(1, String.class, "answer", false, "ANSWER");
        public final static Property AnswerIds = new Property(2, String.class, "answerIds", false, "ANSWER_IDS");
        public final static Property CampaignId = new Property(3, Long.class, "campaignId", false, "CAMPAIGN_ID");
        public final static Property QuestionId = new Property(4, Long.class, "questionId", false, "QUESTION_ID");
        public final static Property ActionId = new Property(5, Long.class, "actionId", false, "ACTION_ID");
        public final static Property ReadyToUpload = new Property(6, Boolean.class, "readyToUpload", false, "READY_TO_UPLOAD");
        public final static Property IpAddress = new Property(7, String.class, "ipAddress", false, "IP_ADDRESS");
        public final static Property AnswerGroupId = new Property(8, Long.class, "answerGroupId", false, "ANSWER_GROUP_ID");
        public final static Property Filename = new Property(9, String.class, "filename", false, "FILENAME");
        public final static Property Latitude = new Property(10, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(11, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Provider = new Property(12, String.class, "provider", false, "PROVIDER");
        public final static Property Photo = new Property(13, Boolean.class, "photo", false, "PHOTO");
    }


    public QuestionAnswerDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionAnswerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION_ANSWER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ANSWER\" TEXT," + // 1: answer
                "\"ANSWER_IDS\" TEXT," + // 2: answerIds
                "\"CAMPAIGN_ID\" INTEGER," + // 3: campaignId
                "\"QUESTION_ID\" INTEGER," + // 4: questionId
                "\"ACTION_ID\" INTEGER," + // 5: actionId
                "\"READY_TO_UPLOAD\" INTEGER," + // 6: readyToUpload
                "\"IP_ADDRESS\" TEXT," + // 7: ipAddress
                "\"ANSWER_GROUP_ID\" INTEGER," + // 8: answerGroupId
                "\"FILENAME\" TEXT," + // 9: filename
                "\"LATITUDE\" REAL," + // 10: latitude
                "\"LONGITUDE\" REAL," + // 11: longitude
                "\"PROVIDER\" TEXT," + // 12: provider
                "\"PHOTO\" INTEGER);"); // 13: photo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION_ANSWER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestionAnswer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(2, answer);
        }
 
        String answerIds = entity.getAnswerIds();
        if (answerIds != null) {
            stmt.bindString(3, answerIds);
        }
 
        Long campaignId = entity.getCampaignId();
        if (campaignId != null) {
            stmt.bindLong(4, campaignId);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(5, questionId);
        }
 
        Long actionId = entity.getActionId();
        if (actionId != null) {
            stmt.bindLong(6, actionId);
        }
 
        Boolean readyToUpload = entity.getReadyToUpload();
        if (readyToUpload != null) {
            stmt.bindLong(7, readyToUpload ? 1L: 0L);
        }
 
        String ipAddress = entity.getIpAddress();
        if (ipAddress != null) {
            stmt.bindString(8, ipAddress);
        }
 
        Long answerGroupId = entity.getAnswerGroupId();
        if (answerGroupId != null) {
            stmt.bindLong(9, answerGroupId);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(10, filename);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(11, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(12, longitude);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(13, provider);
        }
 
        Boolean photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindLong(14, photo ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestionAnswer entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(2, answer);
        }
 
        String answerIds = entity.getAnswerIds();
        if (answerIds != null) {
            stmt.bindString(3, answerIds);
        }
 
        Long campaignId = entity.getCampaignId();
        if (campaignId != null) {
            stmt.bindLong(4, campaignId);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(5, questionId);
        }
 
        Long actionId = entity.getActionId();
        if (actionId != null) {
            stmt.bindLong(6, actionId);
        }
 
        Boolean readyToUpload = entity.getReadyToUpload();
        if (readyToUpload != null) {
            stmt.bindLong(7, readyToUpload ? 1L: 0L);
        }
 
        String ipAddress = entity.getIpAddress();
        if (ipAddress != null) {
            stmt.bindString(8, ipAddress);
        }
 
        Long answerGroupId = entity.getAnswerGroupId();
        if (answerGroupId != null) {
            stmt.bindLong(9, answerGroupId);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(10, filename);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(11, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(12, longitude);
        }
 
        String provider = entity.getProvider();
        if (provider != null) {
            stmt.bindString(13, provider);
        }
 
        Boolean photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindLong(14, photo ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QuestionAnswer readEntity(Cursor cursor, int offset) {
        QuestionAnswer entity = new QuestionAnswer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // answer
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // answerIds
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // campaignId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // questionId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // actionId
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // readyToUpload
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ipAddress
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // answerGroupId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // filename
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // latitude
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // longitude
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // provider
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0 // photo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestionAnswer entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAnswer(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAnswerIds(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCampaignId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setQuestionId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setActionId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setReadyToUpload(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIpAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAnswerGroupId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setFilename(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLatitude(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setLongitude(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setProvider(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPhoto(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QuestionAnswer entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QuestionAnswer entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuestionAnswer entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
