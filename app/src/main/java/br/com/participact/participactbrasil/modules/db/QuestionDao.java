package br.com.participact.participactbrasil.modules.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION".
*/
public class QuestionDao extends AbstractDao<Question, Long> {

    public static final String TABLENAME = "QUESTION";

    /**
     * Properties of entity Question.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Question = new Property(1, String.class, "question", false, "QUESTION");
        public final static Property ClosedAnswers = new Property(2, Boolean.class, "closedAnswers", false, "CLOSED_ANSWERS");
        public final static Property MultipleSelect = new Property(3, Boolean.class, "multipleSelect", false, "MULTIPLE_SELECT");
        public final static Property Order = new Property(4, Integer.class, "order", false, "ORDER");
        public final static Property Answer = new Property(5, String.class, "answer", false, "ANSWER");
        public final static Property AnswerIds = new Property(6, String.class, "answerIds", false, "ANSWER_IDS");
        public final static Property CampaignId = new Property(7, Long.class, "campaignId", false, "CAMPAIGN_ID");
        public final static Property ActionId = new Property(8, Long.class, "actionId", false, "ACTION_ID");
        public final static Property ReadyToUpload = new Property(9, Boolean.class, "readyToUpload", false, "READY_TO_UPLOAD");
        public final static Property Uploaded = new Property(10, Boolean.class, "uploaded", false, "UPLOADED");
        public final static Property Required = new Property(11, Boolean.class, "required", false, "REQUIRED");
        public final static Property Skipped = new Property(12, Boolean.class, "skipped", false, "SKIPPED");
        public final static Property NumberPhotos = new Property(13, Integer.class, "numberPhotos", false, "NUMBER_PHOTOS");
        public final static Property Photo = new Property(14, Boolean.class, "photo", false, "PHOTO");
        public final static Property TargetId = new Property(15, Long.class, "targetId", false, "TARGET_ID");
        public final static Property AnswerDate = new Property(16, java.util.Date.class, "answerDate", false, "ANSWER_DATE");
        public final static Property IpAddress = new Property(17, String.class, "ipAddress", false, "IP_ADDRESS");
        public final static Property IsDate = new Property(18, Boolean.class, "isDate", false, "IS_DATE");
        public final static Property AnswerGroupId = new Property(19, Long.class, "answerGroupId", false, "ANSWER_GROUP_ID");
    }

    private DaoSession daoSession;

    private Query<Question> action_QuestionsQuery;

    public QuestionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"QUESTION\" TEXT," + // 1: question
                "\"CLOSED_ANSWERS\" INTEGER," + // 2: closedAnswers
                "\"MULTIPLE_SELECT\" INTEGER," + // 3: multipleSelect
                "\"ORDER\" INTEGER," + // 4: order
                "\"ANSWER\" TEXT," + // 5: answer
                "\"ANSWER_IDS\" TEXT," + // 6: answerIds
                "\"CAMPAIGN_ID\" INTEGER," + // 7: campaignId
                "\"ACTION_ID\" INTEGER," + // 8: actionId
                "\"READY_TO_UPLOAD\" INTEGER," + // 9: readyToUpload
                "\"UPLOADED\" INTEGER," + // 10: uploaded
                "\"REQUIRED\" INTEGER," + // 11: required
                "\"SKIPPED\" INTEGER," + // 12: skipped
                "\"NUMBER_PHOTOS\" INTEGER," + // 13: numberPhotos
                "\"PHOTO\" INTEGER," + // 14: photo
                "\"TARGET_ID\" INTEGER," + // 15: targetId
                "\"ANSWER_DATE\" INTEGER," + // 16: answerDate
                "\"IP_ADDRESS\" TEXT," + // 17: ipAddress
                "\"IS_DATE\" INTEGER," + // 18: isDate
                "\"ANSWER_GROUP_ID\" INTEGER);"); // 19: answerGroupId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(2, question);
        }
 
        Boolean closedAnswers = entity.getClosedAnswers();
        if (closedAnswers != null) {
            stmt.bindLong(3, closedAnswers ? 1L: 0L);
        }
 
        Boolean multipleSelect = entity.getMultipleSelect();
        if (multipleSelect != null) {
            stmt.bindLong(4, multipleSelect ? 1L: 0L);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(5, order);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(6, answer);
        }
 
        String answerIds = entity.getAnswerIds();
        if (answerIds != null) {
            stmt.bindString(7, answerIds);
        }
 
        Long campaignId = entity.getCampaignId();
        if (campaignId != null) {
            stmt.bindLong(8, campaignId);
        }
 
        Long actionId = entity.getActionId();
        if (actionId != null) {
            stmt.bindLong(9, actionId);
        }
 
        Boolean readyToUpload = entity.getReadyToUpload();
        if (readyToUpload != null) {
            stmt.bindLong(10, readyToUpload ? 1L: 0L);
        }
 
        Boolean uploaded = entity.getUploaded();
        if (uploaded != null) {
            stmt.bindLong(11, uploaded ? 1L: 0L);
        }
 
        Boolean required = entity.getRequired();
        if (required != null) {
            stmt.bindLong(12, required ? 1L: 0L);
        }
 
        Boolean skipped = entity.getSkipped();
        if (skipped != null) {
            stmt.bindLong(13, skipped ? 1L: 0L);
        }
 
        Integer numberPhotos = entity.getNumberPhotos();
        if (numberPhotos != null) {
            stmt.bindLong(14, numberPhotos);
        }
 
        Boolean photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindLong(15, photo ? 1L: 0L);
        }
 
        Long targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(16, targetId);
        }
 
        java.util.Date answerDate = entity.getAnswerDate();
        if (answerDate != null) {
            stmt.bindLong(17, answerDate.getTime());
        }
 
        String ipAddress = entity.getIpAddress();
        if (ipAddress != null) {
            stmt.bindString(18, ipAddress);
        }
 
        Boolean isDate = entity.getIsDate();
        if (isDate != null) {
            stmt.bindLong(19, isDate ? 1L: 0L);
        }
 
        Long answerGroupId = entity.getAnswerGroupId();
        if (answerGroupId != null) {
            stmt.bindLong(20, answerGroupId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Question entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(2, question);
        }
 
        Boolean closedAnswers = entity.getClosedAnswers();
        if (closedAnswers != null) {
            stmt.bindLong(3, closedAnswers ? 1L: 0L);
        }
 
        Boolean multipleSelect = entity.getMultipleSelect();
        if (multipleSelect != null) {
            stmt.bindLong(4, multipleSelect ? 1L: 0L);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(5, order);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(6, answer);
        }
 
        String answerIds = entity.getAnswerIds();
        if (answerIds != null) {
            stmt.bindString(7, answerIds);
        }
 
        Long campaignId = entity.getCampaignId();
        if (campaignId != null) {
            stmt.bindLong(8, campaignId);
        }
 
        Long actionId = entity.getActionId();
        if (actionId != null) {
            stmt.bindLong(9, actionId);
        }
 
        Boolean readyToUpload = entity.getReadyToUpload();
        if (readyToUpload != null) {
            stmt.bindLong(10, readyToUpload ? 1L: 0L);
        }
 
        Boolean uploaded = entity.getUploaded();
        if (uploaded != null) {
            stmt.bindLong(11, uploaded ? 1L: 0L);
        }
 
        Boolean required = entity.getRequired();
        if (required != null) {
            stmt.bindLong(12, required ? 1L: 0L);
        }
 
        Boolean skipped = entity.getSkipped();
        if (skipped != null) {
            stmt.bindLong(13, skipped ? 1L: 0L);
        }
 
        Integer numberPhotos = entity.getNumberPhotos();
        if (numberPhotos != null) {
            stmt.bindLong(14, numberPhotos);
        }
 
        Boolean photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindLong(15, photo ? 1L: 0L);
        }
 
        Long targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(16, targetId);
        }
 
        java.util.Date answerDate = entity.getAnswerDate();
        if (answerDate != null) {
            stmt.bindLong(17, answerDate.getTime());
        }
 
        String ipAddress = entity.getIpAddress();
        if (ipAddress != null) {
            stmt.bindString(18, ipAddress);
        }
 
        Boolean isDate = entity.getIsDate();
        if (isDate != null) {
            stmt.bindLong(19, isDate ? 1L: 0L);
        }
 
        Long answerGroupId = entity.getAnswerGroupId();
        if (answerGroupId != null) {
            stmt.bindLong(20, answerGroupId);
        }
    }

    @Override
    protected final void attachEntity(Question entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Question readEntity(Cursor cursor, int offset) {
        Question entity = new Question( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // question
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // closedAnswers
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // multipleSelect
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // order
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // answer
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // answerIds
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // campaignId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // actionId
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // readyToUpload
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // uploaded
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // required
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // skipped
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // numberPhotos
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // photo
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // targetId
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // answerDate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ipAddress
            cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0, // isDate
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19) // answerGroupId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Question entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQuestion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClosedAnswers(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setMultipleSelect(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setOrder(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAnswer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAnswerIds(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCampaignId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setActionId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setReadyToUpload(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setUploaded(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setRequired(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setSkipped(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setNumberPhotos(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setPhoto(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setTargetId(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setAnswerDate(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setIpAddress(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsDate(cursor.isNull(offset + 18) ? null : cursor.getShort(offset + 18) != 0);
        entity.setAnswerGroupId(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Question entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Question entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Question entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "questions" to-many relationship of Action. */
    public List<Question> _queryAction_Questions(Long actionId) {
        synchronized (this) {
            if (action_QuestionsQuery == null) {
                QueryBuilder<Question> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ActionId.eq(null));
                action_QuestionsQuery = queryBuilder.build();
            }
        }
        Query<Question> query = action_QuestionsQuery.forCurrentThread();
        query.setParameter(0, actionId);
        return query.list();
    }

}
