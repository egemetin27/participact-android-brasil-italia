package br.com.participact.participactbrasil.modules.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUESTION_OPTION".
*/
public class QuestionOptionDao extends AbstractDao<QuestionOption, Long> {

    public static final String TABLENAME = "QUESTION_OPTION";

    /**
     * Properties of entity QuestionOption.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Option = new Property(1, String.class, "option", false, "OPTION");
        public final static Property Order = new Property(2, Integer.class, "order", false, "ORDER");
        public final static Property TargetId = new Property(3, Long.class, "targetId", false, "TARGET_ID");
        public final static Property QuestionId = new Property(4, Long.class, "questionId", false, "QUESTION_ID");
    }

    private Query<QuestionOption> question_Closed_answersQuery;

    public QuestionOptionDao(DaoConfig config) {
        super(config);
    }
    
    public QuestionOptionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUESTION_OPTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"OPTION\" TEXT," + // 1: option
                "\"ORDER\" INTEGER," + // 2: order
                "\"TARGET_ID\" INTEGER," + // 3: targetId
                "\"QUESTION_ID\" INTEGER);"); // 4: questionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUESTION_OPTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QuestionOption entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String option = entity.getOption();
        if (option != null) {
            stmt.bindString(2, option);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(3, order);
        }
 
        Long targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(4, targetId);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(5, questionId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QuestionOption entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String option = entity.getOption();
        if (option != null) {
            stmt.bindString(2, option);
        }
 
        Integer order = entity.getOrder();
        if (order != null) {
            stmt.bindLong(3, order);
        }
 
        Long targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(4, targetId);
        }
 
        Long questionId = entity.getQuestionId();
        if (questionId != null) {
            stmt.bindLong(5, questionId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QuestionOption readEntity(Cursor cursor, int offset) {
        QuestionOption entity = new QuestionOption( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // option
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // order
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // targetId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // questionId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QuestionOption entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOption(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrder(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTargetId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setQuestionId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QuestionOption entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QuestionOption entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QuestionOption entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "closed_answers" to-many relationship of Question. */
    public List<QuestionOption> _queryQuestion_Closed_answers(Long questionId) {
        synchronized (this) {
            if (question_Closed_answersQuery == null) {
                QueryBuilder<QuestionOption> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.QuestionId.eq(null));
                question_Closed_answersQuery = queryBuilder.build();
            }
        }
        Query<QuestionOption> query = question_Closed_answersQuery.forCurrentThread();
        query.setParameter(0, questionId);
        return query.list();
    }

}
