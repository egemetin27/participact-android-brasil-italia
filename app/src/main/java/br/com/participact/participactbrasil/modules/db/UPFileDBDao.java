package br.com.participact.participactbrasil.modules.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPFILE_DB".
*/
public class UPFileDBDao extends AbstractDao<UPFileDB, Long> {

    public static final String TABLENAME = "UPFILE_DB";

    /**
     * Properties of entity UPFileDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Filename = new Property(1, String.class, "filename", false, "FILENAME");
        public final static Property FilePath = new Property(2, String.class, "filePath", false, "FILE_PATH");
        public final static Property ReportId = new Property(3, Long.class, "reportId", false, "REPORT_ID");
        public final static Property Duration = new Property(4, Integer.class, "duration", false, "DURATION");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Uploaded = new Property(6, Boolean.class, "uploaded", false, "UPLOADED");
        public final static Property DateUploaded = new Property(7, java.util.Date.class, "dateUploaded", false, "DATE_UPLOADED");
    }


    public UPFileDBDao(DaoConfig config) {
        super(config);
    }
    
    public UPFileDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPFILE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FILENAME\" TEXT," + // 1: filename
                "\"FILE_PATH\" TEXT," + // 2: filePath
                "\"REPORT_ID\" INTEGER," + // 3: reportId
                "\"DURATION\" INTEGER," + // 4: duration
                "\"TYPE\" TEXT," + // 5: type
                "\"UPLOADED\" INTEGER," + // 6: uploaded
                "\"DATE_UPLOADED\" INTEGER);"); // 7: dateUploaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPFILE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UPFileDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(2, filename);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(3, filePath);
        }
 
        Long reportId = entity.getReportId();
        if (reportId != null) {
            stmt.bindLong(4, reportId);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(5, duration);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        Boolean uploaded = entity.getUploaded();
        if (uploaded != null) {
            stmt.bindLong(7, uploaded ? 1L: 0L);
        }
 
        java.util.Date dateUploaded = entity.getDateUploaded();
        if (dateUploaded != null) {
            stmt.bindLong(8, dateUploaded.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UPFileDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String filename = entity.getFilename();
        if (filename != null) {
            stmt.bindString(2, filename);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(3, filePath);
        }
 
        Long reportId = entity.getReportId();
        if (reportId != null) {
            stmt.bindLong(4, reportId);
        }
 
        Integer duration = entity.getDuration();
        if (duration != null) {
            stmt.bindLong(5, duration);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        Boolean uploaded = entity.getUploaded();
        if (uploaded != null) {
            stmt.bindLong(7, uploaded ? 1L: 0L);
        }
 
        java.util.Date dateUploaded = entity.getDateUploaded();
        if (dateUploaded != null) {
            stmt.bindLong(8, dateUploaded.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UPFileDB readEntity(Cursor cursor, int offset) {
        UPFileDB entity = new UPFileDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filename
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // filePath
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // reportId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // duration
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // uploaded
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // dateUploaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UPFileDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFilename(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFilePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReportId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDuration(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUploaded(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setDateUploaded(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UPFileDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UPFileDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UPFileDB entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
