package br.com.participact.participactbrasil.modules.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPSENSOR".
*/
public class UPSensorDao extends AbstractDao<UPSensor, Long> {

    public static final String TABLENAME = "UPSENSOR";

    /**
     * Properties of entity UPSensor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PipelineTypeValue = new Property(1, Integer.class, "pipelineTypeValue", false, "PIPELINE_TYPE_VALUE");
        public final static Property Data = new Property(2, String.class, "data", false, "DATA");
        public final static Property DateWhen = new Property(3, java.util.Date.class, "dateWhen", false, "DATE_WHEN");
        public final static Property Uploaded = new Property(4, Boolean.class, "uploaded", false, "UPLOADED");
        public final static Property DateUploaded = new Property(5, java.util.Date.class, "dateUploaded", false, "DATE_UPLOADED");
    }


    public UPSensorDao(DaoConfig config) {
        super(config);
    }
    
    public UPSensorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPSENSOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PIPELINE_TYPE_VALUE\" INTEGER," + // 1: pipelineTypeValue
                "\"DATA\" TEXT," + // 2: data
                "\"DATE_WHEN\" INTEGER," + // 3: dateWhen
                "\"UPLOADED\" INTEGER," + // 4: uploaded
                "\"DATE_UPLOADED\" INTEGER);"); // 5: dateUploaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPSENSOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UPSensor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer pipelineTypeValue = entity.getPipelineTypeValue();
        if (pipelineTypeValue != null) {
            stmt.bindLong(2, pipelineTypeValue);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(3, data);
        }
 
        java.util.Date dateWhen = entity.getDateWhen();
        if (dateWhen != null) {
            stmt.bindLong(4, dateWhen.getTime());
        }
 
        Boolean uploaded = entity.getUploaded();
        if (uploaded != null) {
            stmt.bindLong(5, uploaded ? 1L: 0L);
        }
 
        java.util.Date dateUploaded = entity.getDateUploaded();
        if (dateUploaded != null) {
            stmt.bindLong(6, dateUploaded.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UPSensor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer pipelineTypeValue = entity.getPipelineTypeValue();
        if (pipelineTypeValue != null) {
            stmt.bindLong(2, pipelineTypeValue);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(3, data);
        }
 
        java.util.Date dateWhen = entity.getDateWhen();
        if (dateWhen != null) {
            stmt.bindLong(4, dateWhen.getTime());
        }
 
        Boolean uploaded = entity.getUploaded();
        if (uploaded != null) {
            stmt.bindLong(5, uploaded ? 1L: 0L);
        }
 
        java.util.Date dateUploaded = entity.getDateUploaded();
        if (dateUploaded != null) {
            stmt.bindLong(6, dateUploaded.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UPSensor readEntity(Cursor cursor, int offset) {
        UPSensor entity = new UPSensor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // pipelineTypeValue
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // data
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // dateWhen
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // uploaded
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // dateUploaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UPSensor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPipelineTypeValue(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setData(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDateWhen(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUploaded(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setDateUploaded(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UPSensor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UPSensor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UPSensor entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
